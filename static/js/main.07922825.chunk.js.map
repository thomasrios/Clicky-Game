{"version":3,"sources":["components/FriendCard/index.js","components/Wrapper/index.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","click","id","shuffle","alt","name","src","image","Wrapper","children","currentScore","highScore","styles","navbarStyle","background","color","width","height","navElements","justifyContent","fontSize","App","state","players","clicker","map","friend","clicked","console","log","alert","gameOver","setState","sort","a","b","Math","random","style","this","key","React","Component","ReactDOM","render","document","getElementById"],"mappings":"usEAiBeA,MAZf,SAAoBC,GAElB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,gBAAgBC,QAAS,WAAOF,EAAMG,MAAMH,EAAMI,IAAKJ,EAAMK,YAC1E,yBAAKC,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,W,MCH1BC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,W,OCErCC,G,MAAe,GACfC,EAAY,EAEVC,EAAS,CACbC,YAAa,CACXC,WAAY,QACZC,MAAO,QACPC,MAAO,OACPC,OAAQ,OAEVC,YAAa,CACXC,eAAgB,SAChBH,MAAO,OACPI,SAAU,SA0FCC,E,2MApFbC,MAAQ,CACNC,W,EAIFC,QAAU,SAACtB,GACT,IAAMqB,EAAU,EAAKD,MAAMC,QAAQE,KAAI,SAAAC,GAkBrC,OAjBIA,EAAOxB,KAAOA,IAAyB,IAAnBwB,EAAOC,SAC7BD,EAAOC,SAAU,EACjBjB,IACAkB,QAAQC,IAAIH,IAELA,EAAOxB,KAAOA,IAAyB,IAAnBwB,EAAOC,UAClCG,MAAM,oBACFpB,EAAeC,IACjBA,EAAYD,GAEd,EAAKqB,YAEc,KAAjBrB,IACFoB,MAAM,0CACNnB,EAAY,GACZ,EAAKoB,YAEAL,KAETE,QAAQC,IAAI,WACZD,QAAQC,IAAIN,GACZ,EAAKS,SAAS,CAAET,a,EAGlBpB,QAAU,WACR,EAAK6B,SAAS,CACZT,QAAS,EAAKD,MAAMC,QAAQU,MAAK,SAAUC,EAAGC,GAC5C,MAAO,GAAMC,KAAKC,e,EAMxBN,SAAW,WACT,IAAMR,EAAU,EAAKD,MAAMC,QAAQE,KAAI,SAAAC,GAErC,OADAA,EAAOC,SAAU,EACVD,KAEThB,EAAe,EACf,EAAKsB,SAAS,CAAET,a,wEAGR,IAAD,OACP,OACE,kBAAC,EAAD,KACE,yBAAKxB,UAAU,MAAMuC,MAAO1B,EAAOC,aACjC,yBAAKd,UAAU,SAASuC,MAAO1B,EAAOM,aACpC,yBAAKnB,UAAU,YACb,gEAEF,yBAAKA,UAAU,YACb,qCAAWW,EAAX,kBAAwCC,MAM5C4B,KAAKjB,MAAMC,QAAQE,KAAI,SAACC,GACtB,OACE,kBAAC,EAAD,CACEc,IAAKd,EAAOxB,GACZG,KAAMqB,EAAOrB,KACbE,MAAOmB,EAAOnB,MACdN,MAAO,EAAKuB,QACZG,QAASD,EAAOC,QAChBxB,QAAS,EAAKA,QACdD,GAAIwB,EAAOxB,a,GA3ETuC,IAAMC,W,MCLxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.07922825.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\n\nfunction FriendCard(props) {\n\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\" onClick={() => {props.click(props.id); props.shuffle()}}>\n        <img alt={props.name} src={props.image} />\n      </div>\n      {/* <span className=\"remove\" >ùòÖ</span> */}\n    </div>\n  );\n}\n\nexport default FriendCard;\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport players from \"./players.json\";\nimport \"./App.css\";\n\nlet currentScore = 0;\nlet highScore = 0;\n\nconst styles = {\n  navbarStyle: {\n    background: \"black\",\n    color: \"white\",\n    width: \"100%\",\n    height: \"20%\"\n  },\n  navElements: {\n    justifyContent: \"center\",\n    width: \"100%\",\n    fontSize: \"32px\"\n  }\n};\n\nclass App extends React.Component {\n\n  state = {\n    players\n  };\n\n\n  clicker = (id) => {\n    const players = this.state.players.map(friend => {\n      if (friend.id === id && friend.clicked === false) {\n        friend.clicked = true;\n        currentScore++\n        console.log(friend)\n      }\n      else if (friend.id === id && friend.clicked === true) {\n        alert(\"You're an idiot!\")\n        if (currentScore > highScore) {\n          highScore = currentScore\n        }\n        this.gameOver()\n      }\n      if (currentScore === 12) {\n        alert(\"You watch basketball! You're a winner!\")\n        highScore = 12\n        this.gameOver()\n      }\n      return friend\n    })\n    console.log(\"clicked\")\n    console.log(players)\n    this.setState({ players })\n  }\n\n  shuffle = () => {\n    this.setState({\n      players: this.state.players.sort(function (a, b) {\n        return 0.5 - Math.random();\n      }\n      )\n    })\n  }\n\n  gameOver = () => {\n    const players = this.state.players.map(friend => {\n      friend.clicked = false;\n      return friend\n    })\n    currentScore = 0;\n    this.setState({ players })\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <div className=\"row\" style={styles.navbarStyle}>\n          <nav className=\"navbar\" style={styles.navElements}>\n            <div className=\"col-md-4\">\n              <p>Click on a player to get started</p>\n            </div>\n            <div className=\"col-md-4\">\n              <p>Score: {currentScore} | High Score: {highScore}</p>\n            </div>\n          </nav>\n        </div>\n        \n        {\n          this.state.players.map((friend) => {\n            return (\n              <FriendCard\n                key={friend.id}\n                name={friend.name}\n                image={friend.image}\n                click={this.clicker}\n                clicked={friend.clicked}\n                shuffle={this.shuffle}\n                id={friend.id}\n              />\n            )\n          })\n        }\n\n      </Wrapper >\n    );\n  }\n\n}\nexport default App;\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}